{{define "relation.list"}}
{{$relation := .}}
{{$primaryField := $relation.PrimaryField}}
//! redis relation list
func (m *_{{$relation.Name}}RedisMgr) ListLPush(relation *{{$relation.Name}}) error {
	return m.LPush(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), relation.Value).Err()
}

func (m *_{{$relation.Name}}RedisMgr) ListRPush(relation *{{$relation.Name}}) error {
	return m.RPush(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), relation.Value).Err()
}

func (m *_{{$relation.Name}}RedisMgr) ListLPop(key string) (*{{$relation.Name}}, error) {
	str, err := m.LPop(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Result()
	if err != nil {
		return nil, err
	}

	relation := m.New{{$relation.Name}}(key)
	{{- if $relation.ValueField.IsNeedTransform}}
		var val {{$relation.ValueField.GetTransform.TypeOrigin}}
		if err := orm.StringScan(str, &val); err != nil {
			return nil, err
		}
		relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
	{{- else}}
		if err := orm.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
	{{- end}}

	return relation, nil
}

func (m *_{{$relation.Name}}RedisMgr) ListRPop(key string) (*{{$relation.Name}}, error) {
	str, err := m.RPop(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Result()
	if err != nil {
		return nil, err
	}

	relation := m.New{{$relation.Name}}(key)
	{{- if $relation.ValueField.IsNeedTransform}}
		var val {{$relation.ValueField.GetTransform.TypeOrigin}}
		if err := orm.StringScan(str, &val); err != nil {
			return nil, err
		}
		relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
	{{- else}}
		if err := orm.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
	{{- end}}

	return relation, nil
}

func (m *_{{$relation.Name}}RedisMgr) ListLRange(key string, start, stop int64) ([]*{{$relation.Name}}, error) {
	strs, err := m.LRange(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key), start, stop).Result()
	if err != nil {
		return nil, err
	}

	relations := make([]*{{$relation.Name}}, 0, len(strs))
	for _, str := range strs {
		relation := m.New{{$relation.Name}}(key)
		{{- if $relation.ValueField.IsNeedTransform}}
			var val {{$relation.ValueField.GetTransform.TypeOrigin}}
			if err := orm.StringScan(str, &val); err != nil {
				return nil, err
			}
			relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
		{{- else}}
		if err := orm.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
		{{- end}}
		relations = append(relations, relation)
	}
	return relations, nil
}

func (m *_{{$relation.Name}}RedisMgr) ListLRem(relation *{{$relation.Name}}) error {
	return m.LRem(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), 0, relation.Value).Err()
}

func (m *_{{$relation.Name}}RedisMgr) ListLLen(key string) (int64, error) {
	return m.LLen(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Result()
}

func (m *_{{$relation.Name}}RedisMgr) ListLDel(key string) error {
	return m.Del(context.TODO(), listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Err()
}

func (m *_{{$relation.Name}}RedisMgr) Clear() error {
	ctx := context.TODO()
	strs, err := m.Keys(ctx, listOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", "*")).Result()
	if err != nil {
		return err
	}
	if len(strs) > 0 {
		return m.Del(ctx, strs...).Err()
	}
	return nil
}

{{end}}
