{{define "object"}}package {{.GoPackage}}
{{$obj := .}}
{{$relation := $obj.Relation}}

import (
	"fmt"
	"time"
	"strings"
	"database/sql"
	{{- if $obj.DbContains "elastic"}}
	"sync"
	{{- end}}
	{{- if $obj.DbContains "redis"}}
	"errors"
	{{- end}}
	"context"

	"github.com/ezbuy/redis-orm/orm"
	"gopkg.in/go-playground/validator.v9"
	{{- if $obj.DbContains "elastic"}}
	elastic "gopkg.in/olivere/elastic.v2"
	{{- end}}
	{{- if $obj.DbContains "redis"}}
	redis "gopkg.in/redis.v5"
	{{- end}}
)
var (
	_ sql.DB
	_ time.Time
	_ fmt.Formatter
	_ strings.Reader
	_ orm.VSet
	_ validator.Validate
)

{{if not $relation}}
	type {{.Name}} struct {
		{{- if $obj.DbContains "mongo"}}
		ID 	bson.ObjectId `bson:"_id,omitempty" json:"id"`
		{{- end}}
		{{- range $field := .Fields}}
		{{$field.Name}}  {{$field.GetType}} {{$field.GetTag}}
		{{- end}}
	}
	{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql") }}
	var {{$obj.Name}}Columns = struct{
		{{- range $field := .Fields}}
		{{$field.Name}}  string
		{{- end}}
	}{
		{{- range $field := .Fields}}
		"{{$field.ColumnName}}",
		{{- end}}
	}
	{{- end}}

	type _{{$obj.Name}}Mgr struct {
	}
	var {{$obj.Name}}Mgr *_{{$obj.Name}}Mgr

	func (m *_{{$obj.Name}}Mgr) New{{$obj.Name}}() *{{$obj.Name}} {
		return &{{$obj.Name}}{}
	}

	//! object function
	{{template "object.functions" $obj}}

	//! primary key
	{{template "object.primary.key" $obj.PrimaryKey}}

	//! uniques
	{{- range $i, $unique := $obj.Uniques}}
	{{template "object.unique" $unique}}
	{{- end}}

	//! indexes
	{{- range $i, $index := $obj.Indexes}}
	{{template "object.index" $index}}
	{{- end}}

	//! ranges
	{{- range $i, $rg := $obj.Ranges}}
	{{template "object.range" $rg}}
	{{- end}}

	{{- if or ($obj.DbContains "mysql") ($obj.DbContains "mssql") }}
	{{template "object.db" $obj}}
	{{- end}}

	{{- if $obj.DbContains "redis"}}
	{{template "object.redis" $obj}}
	{{- end}}

	{{- if $obj.DbContains "mongo"}}
	{{template "object.mongo" $obj}}
	{{- end}}

	{{- if $obj.DbContains "elastic"}}
	{{template "object.elastic" $obj}}
	{{- end}}
{{end}}


{{end}}

