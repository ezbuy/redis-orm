{{define "relation.zset"}}
{{$relation := .}}
{{$primaryField := $relation.PrimaryField}}
//! redis relation zset
func (m *_{{$relation.Name}}RedisMgr) ZSetAdd(relation *{{$relation.Name}}) error {
	return m.ZAdd(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), &redis.Z{Score: relation.Score, Member: {{$relation.ValueField.GetTransformValue "relation."}}}).Err()
}

func (pipe *_{{$relation.Name}}RedisPipeline) ZSetAdd(relation *{{$relation.Name}}) error {
	return pipe.ZAdd(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), &redis.Z{Score: relation.Score, Member: {{$relation.ValueField.GetTransformValue "relation."}}}).Err()
}

func (m *_{{$relation.Name}}RedisMgr) ZSetRange(key string, min, max int64) ([]*{{$relation.Name}}, error) {
	strs, err := m.ZRange(context.TODO(), zsetOfClass("{{$relation.Name}}", key), min, max).Result()
	if err != nil {
		return nil, err
	}

	relations := make([]*{{$relation.Name}}, 0, len(strs))
	for _, str := range strs {
		relation := m.New{{$relation.Name}}(key)
		{{- if $relation.ValueField.IsNeedTransform}}
			var val {{$relation.ValueField.GetTransform.TypeOrigin}}
			if err := orm.StringScan(str, &val); err != nil {
				return nil, err
			}
			relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
		{{- else}}
		if err := orm.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
		{{- end}}
		relations = append(relations, relation)
	}
	return relations, nil
}

func (m *_{{$relation.Name}}RedisMgr) ZSetRevertRange(key string, min, max int64) ([]*{{$relation.Name}}, error) {
	strs, err := m.ZRevRange(context.TODO(), zsetOfClass("{{$relation.Name}}", key), min, max).Result()
	if err != nil {
		return nil, err
	}

	relations := make([]*{{$relation.Name}}, 0, len(strs))
	for _, str := range strs {
		relation := m.New{{$relation.Name}}(key)
		{{- if $relation.ValueField.IsNeedTransform}}
			var val {{$relation.ValueField.GetTransform.TypeOrigin}}
			if err := orm.StringScan(str, &val); err != nil {
				return nil, err
			}
			relation.{{$relation.ValueField.Name}} = {{- printf $relation.ValueField.GetTransform.ConvertTo "val"}}
		{{- else}}
		if err := orm.StringScan(str, &relation.Value); err != nil {
			return nil, err
		}
		{{- end}}
		relations = append(relations, relation)
	}
	return relations, nil
}

func (m *_{{$relation.Name}}RedisMgr) ZSetRem(relation *{{$relation.Name}}) error {
	return m.ZRem(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), {{$relation.ValueField.GetTransformValue "relation."}}).Err()
}

func (pipe *_{{$relation.Name}}RedisPipeline) ZSetRem(relation *{{$relation.Name}}) error {
	return pipe.ZRem(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", relation.Key), {{$relation.ValueField.GetTransformValue "relation."}}).Err()
}

func (m *_{{$relation.Name}}RedisMgr) ZSetDel(key string) error {
	return m.Del(context.TODO(), setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Err()
}

func (pipe *_{{$relation.Name}}RedisPipeline) ZSetDel(key string) error {
	return pipe.Del(context.TODO(), setOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key)).Err()
}

func (m *_{{$relation.Name}}RedisMgr) Range(key string, min, max int64) ([]string, error) {
	return m.ZRange(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key), min, max).Result()
}

func (m *_{{$relation.Name}}RedisMgr) RangeRevert(key string, min, max int64) ([]string, error) {
	return m.ZRevRange(context.TODO(), zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", key), min, max).Result()
}

func (m *_{{$relation.Name}}RedisMgr) Clear() error {
	ctx := context.TODO()
	strs, err := m.Keys(ctx, zsetOfClass("{{$relation.Obj.Name}}", "{{$relation.Name}}", "*")).Result()
	if err != nil {
		return err
	}
	if len(strs) > 0 {
		return m.Del(ctx, strs...).Err()
	}
	return nil
}
{{end}}

